{
    "pipes": [],
    "interfaces": [
        {
            "name": "Breed",
            "id": "interface-Breed-1fca2b4f5b30fcb0312c66a807dbbe0af8511714721bf136fd9044587cfd3f66407c0b3b592c0377f343b914fe3261441138b8f01b275349f996c9b2e31da6ea",
            "file": "src/app/dto/breed.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Breed {\n  id: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Horse",
            "id": "interface-Horse-2050fc9ac9dffca12c12f3725822686475e8ea32d413ac5b6faca409c7caf518f3cfd7f844090f7a154aebd1e8260f8821a0336065b6cdcac2019426bdcef695",
            "file": "src/app/dto/horse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Sex} from './sex';\nimport {Breed} from \"./breed\";\n\nexport interface Horse {\n  id?: number;\n  name: string;\n  sex: Sex;\n  dateOfBirth: Date;\n  height: number;\n  weight: number;\n  breed?: Breed;\n}\n\nexport interface HorseListDto {\n  id: number,\n  name: string,\n  sex: Sex,\n  dateOfBirth: Date;\n  breed: Breed;\n}\n\n\nexport interface HorseSearch {\n  name?: string;\n  sex?: Sex;\n  bornEarliest?: Date;\n  bornLastest?: Date;\n  breedName?: string;\n  limit?: number;\n}\n\nexport interface HorseSelection {\n    id: number;\n    name: string;\n    dateOfBirth: Date;\n}\n",
            "properties": [
                {
                    "name": "breed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Breed",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dateOfBirth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sex",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HorseListDto",
            "id": "interface-HorseListDto-2050fc9ac9dffca12c12f3725822686475e8ea32d413ac5b6faca409c7caf518f3cfd7f844090f7a154aebd1e8260f8821a0336065b6cdcac2019426bdcef695",
            "file": "src/app/dto/horse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Sex} from './sex';\nimport {Breed} from \"./breed\";\n\nexport interface Horse {\n  id?: number;\n  name: string;\n  sex: Sex;\n  dateOfBirth: Date;\n  height: number;\n  weight: number;\n  breed?: Breed;\n}\n\nexport interface HorseListDto {\n  id: number,\n  name: string,\n  sex: Sex,\n  dateOfBirth: Date;\n  breed: Breed;\n}\n\n\nexport interface HorseSearch {\n  name?: string;\n  sex?: Sex;\n  bornEarliest?: Date;\n  bornLastest?: Date;\n  breedName?: string;\n  limit?: number;\n}\n\nexport interface HorseSelection {\n    id: number;\n    name: string;\n    dateOfBirth: Date;\n}\n",
            "properties": [
                {
                    "name": "breed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Breed",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dateOfBirth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sex",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HorseSearch",
            "id": "interface-HorseSearch-2050fc9ac9dffca12c12f3725822686475e8ea32d413ac5b6faca409c7caf518f3cfd7f844090f7a154aebd1e8260f8821a0336065b6cdcac2019426bdcef695",
            "file": "src/app/dto/horse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Sex} from './sex';\nimport {Breed} from \"./breed\";\n\nexport interface Horse {\n  id?: number;\n  name: string;\n  sex: Sex;\n  dateOfBirth: Date;\n  height: number;\n  weight: number;\n  breed?: Breed;\n}\n\nexport interface HorseListDto {\n  id: number,\n  name: string,\n  sex: Sex,\n  dateOfBirth: Date;\n  breed: Breed;\n}\n\n\nexport interface HorseSearch {\n  name?: string;\n  sex?: Sex;\n  bornEarliest?: Date;\n  bornLastest?: Date;\n  breedName?: string;\n  limit?: number;\n}\n\nexport interface HorseSelection {\n    id: number;\n    name: string;\n    dateOfBirth: Date;\n}\n",
            "properties": [
                {
                    "name": "bornEarliest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "bornLastest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "breedName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Sex",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HorseSelection",
            "id": "interface-HorseSelection-2050fc9ac9dffca12c12f3725822686475e8ea32d413ac5b6faca409c7caf518f3cfd7f844090f7a154aebd1e8260f8821a0336065b6cdcac2019426bdcef695",
            "file": "src/app/dto/horse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Sex} from './sex';\nimport {Breed} from \"./breed\";\n\nexport interface Horse {\n  id?: number;\n  name: string;\n  sex: Sex;\n  dateOfBirth: Date;\n  height: number;\n  weight: number;\n  breed?: Breed;\n}\n\nexport interface HorseListDto {\n  id: number,\n  name: string,\n  sex: Sex,\n  dateOfBirth: Date;\n  breed: Breed;\n}\n\n\nexport interface HorseSearch {\n  name?: string;\n  sex?: Sex;\n  bornEarliest?: Date;\n  bornLastest?: Date;\n  breedName?: string;\n  limit?: number;\n}\n\nexport interface HorseSelection {\n    id: number;\n    name: string;\n    dateOfBirth: Date;\n}\n",
            "properties": [
                {
                    "name": "dateOfBirth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentCreateDto",
            "id": "interface-TournamentCreateDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "participants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorseSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentDetailDto",
            "id": "interface-TournamentDetailDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "participants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetailParticipantDto[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentDetailParticipantDto",
            "id": "interface-TournamentDetailParticipantDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "dateOfBirth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "entryNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "horseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "roundReached",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentListDto",
            "id": "interface-TournamentListDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentSearchParams",
            "id": "interface-TournamentSearchParams-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentStandingsDto",
            "id": "interface-TournamentStandingsDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "participants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetailParticipantDto[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentStandingsTreeDto",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TournamentStandingsTreeDto",
            "id": "interface-TournamentStandingsTreeDto-f5a994aa4e0349a400e4359e7b0bda916b8f67ffc98570c45174b9acf548779abc6d57ac934d642bbf8ae69a5c5c8d434e8206363802cfebaa30e3e6d54869c4",
            "file": "src/app/dto/tournament.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {HorseSelection} from \"./horse\";\n\nexport interface TournamentSearchParams {\n  name?: string;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport interface TournamentListDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface TournamentCreateDto {\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: HorseSelection[];\n}\n\nexport interface TournamentDetailDto {\n  id: number;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  participants: TournamentDetailParticipantDto[];\n}\n\nexport interface TournamentDetailParticipantDto {\n  horseId: number;\n  name: string;\n  dateOfBirth: Date;\n  entryNumber?: number;\n  roundReached?: number;\n}\n\nexport interface TournamentStandingsTreeDto {\n  thisParticipant: TournamentDetailParticipantDto | null;\n  branches?: TournamentStandingsTreeDto[];\n}\n\n\nexport interface TournamentStandingsDto {\n  id: number;\n  name: string;\n  participants: TournamentDetailParticipantDto[];\n  tree: TournamentStandingsTreeDto;\n}\n",
            "properties": [
                {
                    "name": "branches",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentStandingsTreeDto[]",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "thisParticipant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentDetailParticipantDto | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BreedService",
            "id": "injectable-BreedService-e4914803421297e4ad70e481816c7ea53cefdf8b88f7491c61c06fafba11ac6f97f3cfd13922150c2c4f0e5d72f8273b0c9cfd2459835a2f6e453a6e7d2d6e85",
            "file": "src/app/service/breed.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "breedsByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Breed[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpParams} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport {Breed} from \"../dto/breed\";\nimport {Observable} from \"rxjs\";\n\nconst baseUri = environment.backendUrl + \"/breeds\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreedService {\n\n\n  constructor(\n    private http: HttpClient\n  ) {\n  }\n\n  public breedsByName(name: string, limit: number | undefined): Observable<Breed[]> {\n    let params = new HttpParams();\n    params = params.append(\"name\", name);\n    if (limit != null) {\n      params = params.append(\"limit\", limit);\n    }\n    return this.http.get<Breed[]>(baseUri, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorFormatterService",
            "id": "injectable-ErrorFormatterService-6a67074fe7eb792f9c03b245d09c12707ff9637eb60673a6e89d80c982b165ce76d7f4951fa63afa03bb287234e5a08c5a5788ececcc15c90dc46ba2285bd7b2",
            "file": "src/app/service/error-formatter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, SecurityContext} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorFormatterService {\n\n  constructor(\n    private domSanitizer: DomSanitizer,\n  ) { }\n\n  format(error: any): string {\n    let message = this.domSanitizer.sanitize(SecurityContext.HTML, error.error.message) ?? '';\n    if (!!error.error.errors) {\n      message += ':<ul>';\n      for (const e of error.error.errors) {\n        /* Use Angular's DomSanitizer to strip dangerous parts out of the HTML\n         * before putting it into the error message.\n         * Toastr already does this, but it can't hurt to do here too,\n         * in case the library every fails to do it.\n         */\n        const sanE = this.domSanitizer.sanitize(SecurityContext.HTML, e);\n        message += `<li>${sanE}</li>`;\n      }\n      message += '</ul>';\n    } else {\n      message += '.';\n    }\n    return message;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HorseService",
            "id": "injectable-HorseService-92fcfbb8898ccc6575d6c6d43f1e2eb0831446b20a474bf41d95f2be1cfafde7379f668703c7e2a2188d71cee4251fc6d9203db768eb8aea99dccd0fee830e16",
            "file": "src/app/service/horse.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "horse",
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Horse>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreate a new horse in the system.\n\n",
                    "description": "<p>Create a new horse in the system.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1743,
                                "end": 1748,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "horse"
                            },
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1737,
                                "end": 1742,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the data for the horse that should be created</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1801,
                                "end": 1807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>an Observable for the created horse</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "horseId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDelete the horse with the given id.\n\n",
                    "description": "<p>Delete the horse with the given id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2367,
                                "end": 2374,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "horseId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2361,
                                "end": 2366,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the horse to be deleted.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2416,
                                "end": 2422,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>an empty Observable</p>\n"
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Horse>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "searchParams",
                            "type": "HorseSearch",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HorseListDto[]>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchParams",
                            "type": "HorseSearch",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "horse",
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Horse>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate existing horse in the system.\n\n",
                    "description": "<p>Update existing horse in the system.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2045,
                                "end": 2050,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "horse"
                            },
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2039,
                                "end": 2044,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": "<p>the data for the horse that should be updated (incl. id)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2114,
                                "end": 2120,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "return"
                            },
                            "comment": "<p>an Observable for the updated horse</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {HttpClient, HttpParams} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {map, Observable, tap} from 'rxjs';\nimport {environment} from 'src/environments/environment';\nimport {Horse, HorseListDto} from '../dto/horse';\nimport {HorseSearch} from '../dto/horse';\nimport {formatIsoDate} from '../util/date-helper';\nimport {NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\n\nconst baseUri = environment.backendUrl + '/horses';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HorseService {\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  getById(id: number): Observable<Horse> {\n    return this.http.get<Horse>(`${baseUri}/${id}`);\n  }\n\n  search(searchParams: HorseSearch): Observable<HorseListDto[]> {\n    if (searchParams.name === '') {\n      delete searchParams.name;\n    }\n    let params = new HttpParams();\n    if (searchParams.name) {\n      params = params.append('name', searchParams.name);\n    }\n    if (searchParams.sex) {\n      params = params.append('sex', searchParams.sex);\n    }\n    if (searchParams.bornEarliest) {\n      params = params.append('bornEarliest', formatIsoDate(searchParams.bornEarliest));\n    }\n    if (searchParams.bornLastest) {\n      params = params.append('bornLatest', formatIsoDate(searchParams.bornLastest));\n    }\n    if (searchParams.breedName) {\n      params = params.append('breed', searchParams.breedName);\n    }\n    if (searchParams.limit) {\n      params = params.append('limit', searchParams.limit);\n    }\n    return this.http.get<HorseListDto[]>(baseUri, { params })\n      .pipe(tap(horses => horses.map(h => {\n        h.dateOfBirth = new Date(h.dateOfBirth); // Parse date string\n      })));\n  }\n\n  /**\n   * Create a new horse in the system.\n   *\n   * @param horse the data for the horse that should be created\n   * @return an Observable for the created horse\n   */\n  create(horse: Horse): Observable<Horse> {\n    return this.http.post<Horse>(\n      baseUri + \"/create\",\n      horse\n    );\n  }\n\n\n  /**\n   * Update existing horse in the system.\n   *\n   * @param horse the data for the horse that should be updated (incl. id)\n   * @return an Observable for the updated horse\n   */\n  update(horse: Horse): Observable<Horse> {\n    return this.http.put<Horse>(\n      `${baseUri}/update/${horse.id}`,\n      horse\n    );\n  }\n\n  /**\n   * Delete the horse with the given id.\n   *\n   * @param horseId the id of the horse to be deleted.\n   * @return an empty Observable\n   */\n  delete(horseId: number): Observable<void> {\n    return this.http.delete<void>(`${baseUri}/delete/${horseId}`)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TournamentService",
            "id": "injectable-TournamentService-ccb50fca0f7f228683f43145748cbea942548a309703c89bfcb026139306072f4691f12d11a760dac9c1c739e8e6a3b93fa3a3a637e04ad15414ae53897a1f42",
            "file": "src/app/service/tournament.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "tournament",
                            "type": "TournamentCreateDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TournamentDetailDto>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "tournament",
                            "type": "TournamentCreateDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\nimport {map, Observable, throwError} from 'rxjs';\nimport {formatIsoDate} from '../util/date-helper';\nimport {\n  TournamentCreateDto, TournamentDetailDto, TournamentDetailParticipantDto,\n  TournamentListDto,\n  TournamentSearchParams,\n  TournamentStandingsDto, TournamentStandingsTreeDto\n} from \"../dto/tournament\";\nconst baseUri = environment.backendUrl + '/tournaments';\n\nclass ErrorDto {\n  constructor(public message: String) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TournamentService {\n  constructor(\n    private http: HttpClient\n  ) {\n  }\n\n\n  public create(tournament: TournamentCreateDto): Observable<TournamentDetailDto> {\n    // TODO this is not implemented yet!\n    return throwError(() => ({message: \"Not implemented yet\"}));\n  }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ErrorDto",
            "id": "class-ErrorDto-ccb50fca0f7f228683f43145748cbea942548a309703c89bfcb026139306072f4691f12d11a760dac9c1c739e8e6a3b93fa3a3a637e04ad15414ae53897a1f42",
            "file": "src/app/service/tournament.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\nimport {map, Observable, throwError} from 'rxjs';\nimport {formatIsoDate} from '../util/date-helper';\nimport {\n  TournamentCreateDto, TournamentDetailDto, TournamentDetailParticipantDto,\n  TournamentListDto,\n  TournamentSearchParams,\n  TournamentStandingsDto, TournamentStandingsTreeDto\n} from \"../dto/tournament\";\nconst baseUri = environment.backendUrl + '/tournaments';\n\nclass ErrorDto {\n  constructor(public message: String) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TournamentService {\n  constructor(\n    private http: HttpClient\n  ) {\n  }\n\n\n  public create(tournament: TournamentCreateDto): Observable<TournamentDetailDto> {\n    // TODO this is not implemented yet!\n    return throwError(() => ({message: \"Not implemented yet\"}));\n  }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "message",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "String",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0023012fe875717a39fd6a81eb76df92d366cebabeacad73a7bb4c6c567da6220dc1a721c6a135eb8a8e0929cfad2c4082a160db6ebe8747bb977b77ab1ab8f7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-header></app-header>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n\n\n"
        },
        {
            "name": "AutocompleteComponent",
            "id": "component-AutocompleteComponent-de9441d9efb32c644b52d2a5442de9ccae1cfafcd4109ce791aa6f6d74bb567a43ff2d5d232915ceaedc163d12f414c03b18ddd54914f0bda79125a1f9450534",
            "file": "src/app/component/autocomplete/autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: AutocompleteComponent,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-autocomplete",
            "styleUrls": [
                "./autocomplete.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./autocomplete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "datalistClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | string[] | Set<string> | literal type",
                    "decorators": []
                },
                {
                    "name": "formatModel",
                    "defaultValue": "(model: T | undefined) => (model as any).toString()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUsed to get a readable representation of the model value\nfor use in the text input field\nand the data list options\n",
                    "description": "<p>Used to get a readable representation of the model value\nfor use in the text input field\nand the data list options</p>\n",
                    "line": 70,
                    "type": "(model: T) => any",
                    "decorators": []
                },
                {
                    "name": "suggestions",
                    "defaultValue": "(input: string) => of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUsed to get a list of suggestions.\nThese are displayed in the data list\nand also used to check if input is valid when `valueNeedsToMatchSuggestion` is `true`.\n",
                    "description": "<p>Used to get a list of suggestions.\nThese are displayed in the data list\nand also used to check if input is valid when <code>valueNeedsToMatchSuggestion</code> is <code>true</code>.</p>\n",
                    "line": 63,
                    "type": "(input: string) => any",
                    "decorators": []
                },
                {
                    "name": "textInputClass",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string | string[] | Set<string> | literal type",
                    "decorators": []
                },
                {
                    "name": "valueNeedsToMatchSuggestion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIf this is `true`, only inputs that match an option from the suggestion list are considered valid\nand are assigned to the model variable `value`.\nSetting this to  `false`, only makes sense, if the type `T` of  the model is `string`.\n",
                    "description": "<p>If this is <code>true</code>, only inputs that match an option from the suggestion list are considered valid\nand are assigned to the model variable <code>value</code>.\nSetting this to  <code>false</code>, only makes sense, if the type <code>T</code> of  the model is <code>string</code>.</p>\n",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkValueNeedsToMatchSuggestion",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "dataListId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "inputChange",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "inputText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "value",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | undefined",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "valueCandidates",
                    "defaultValue": "new Map<string, T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfInputMatchesCandidate",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReceiveNewCandidates",
                    "args": [
                        {
                            "name": "result",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetInputText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "T | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>Component for an autocomplete input, similar to a combo box,\nthat lets the user search a list of options by entering a search text.\nThe using site needs to supply a callback that produces the autocomplete options\nand a callback that formats the model objects to readable text.</p>\n",
            "rawdescription": "\nComponent for an autocomplete input, similar to a combo box,\nthat lets the user search a list of options by entering a search text.\nThe using site needs to supply a callback that produces the autocomplete options\nand a callback that formats the model objects to readable text.\n\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {debounceTime, of, Subject, switchMap, tap} from 'rxjs';\n\n\n/** Component for an autocomplete input, similar to a combo box,\n * that lets the user search a list of options by entering a search text.\n * The using site needs to supply a callback that produces the autocomplete options\n * and a callback that formats the model objects to readable text.\n *\n * @param T the model type. In practice only used as a placeholder and helper for typesafety inside this class.\n */\n@Component({\n  selector: 'app-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: AutocompleteComponent,\n    },\n  ]\n})\nexport class AutocompleteComponent<T> implements OnInit, ControlValueAccessor {\n  static counter = 0;\n\n  // See documentation of NgClass for comparison\n  // <https://angular.io/api/common/NgClass>\n  @Input()\n  textInputClass: string | string[] | Set<string> | { [klass: string]: any } = [];\n  @Input()\n  datalistClass: string | string[] | Set<string> | { [klass: string]: any } = [];\n\n  dataListId: string;\n  inputText = '';\n  checkValueNeedsToMatchSuggestion = true;\n  value: T | undefined = undefined;\n  valueCandidates = new Map<string, T>();\n  touched = false;\n  disabled = false;\n  inputChange = new Subject<string>();\n\n  constructor() {\n    const autocompleteId = AutocompleteComponent.counter++;\n    this.dataListId = `app-autocomplete-candidates-${autocompleteId}`;\n  }\n\n  /** If this is `true`, only inputs that match an option from the suggestion list are considered valid\n   * and are assigned to the model variable `value`.\n   * Setting this to  `false`, only makes sense, if the type `T` of  the model is `string`.\n   */\n  @Input()\n  set valueNeedsToMatchSuggestion(value: string) {\n    this.checkValueNeedsToMatchSuggestion = (value === 'true');\n  }\n\n  /** Used to get a list of suggestions.\n   * These are displayed in the data list\n   * and also used to check if input is valid when `valueNeedsToMatchSuggestion` is `true`.\n   */\n  @Input()\n  suggestions = (input: string) => of([]);\n\n  /** Used to get a readable representation of the model value\n   * for use in the text input field\n   * and the data list options\n   */\n  @Input()\n  formatModel = (model: T | undefined) => (model as any).toString();\n\n  // Dummy functions for the callback variables, so that we do not need to check,\n  // if one was already registered\n  onChange = (quantity: any) => {};\n  onTouched = () => {};\n\n  ngOnInit(): void {\n    this.inputChange\n      .pipe(\n        tap(this.checkIfInputMatchesCandidate.bind(this)),\n        debounceTime(300),\n        switchMap(this.suggestions),\n      )\n      .subscribe({\n        next: this.onReceiveNewCandidates.bind(this),\n        error: err => {\n          console.error('Error when getting autocompletion list', err);\n        },\n      });\n  }\n\n\n  public resetInputText(): void {\n    if (this.checkValueNeedsToMatchSuggestion) {\n      this.inputText = this.formatModel(this.value);\n    }\n  }\n\n  /* Methods needed for ControlValueAccessor */\n\n  public writeValue(obj: any): void {\n    this.setValue(obj as T);\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  public setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  private checkIfInputMatchesCandidate(input: string): void {\n    this.markAsTouched();\n    if (input === '') {\n      this.setValue(undefined);\n    } else if (!this.checkValueNeedsToMatchSuggestion) {\n      /* Type cast hack. The option `valueNeedsToMatchSuggestion` only makes sense\n       * if  the model type parameter `T` actually is meant to be `string` anyway.\n       * If it is not, expect hell to break loose here.\n      */\n      this.setValue(input as T);\n    } else {\n      const selectedValue = this.valueCandidates.get(input);\n      if (selectedValue) {\n        this.setValue(selectedValue);\n      }\n    }\n  }\n\n  private setValue(newValue: T | undefined) {\n    this.value = newValue;\n    this.inputText = this.formatModel(this.value);\n    this.onChange(this.value);\n  }\n\n  private onReceiveNewCandidates(result: T[]) {\n    this.valueCandidates.clear();\n    for (const candidate of result) {\n      this.valueCandidates.set(this.formatModel(candidate), candidate);\n    }\n  }\n\n  private markAsTouched(): void {\n    if (!this.touched) {\n      this.touched = true;\n      this.onTouched();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./autocomplete.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "valueNeedsToMatchSuggestion": {
                    "name": "valueNeedsToMatchSuggestion",
                    "setSignature": {
                        "name": "valueNeedsToMatchSuggestion",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "rawdescription": "\nIf this is `true`, only inputs that match an option from the suggestion list are considered valid\nand are assigned to the model variable `value`.\nSetting this to  `false`, only makes sense, if the type `T` of  the model is `string`.\n",
                        "description": "<p>If this is <code>true</code>, only inputs that match an option from the suggestion list are considered valid\nand are assigned to the model variable <code>value</code>.\nSetting this to  <code>false</code>, only makes sense, if the type <code>T</code> of  the model is <code>string</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<input type=\"text\"\n       [attr.list]=\"dataListId\"\n       [ngClass]=\"textInputClass\"\n       [(ngModel)]=\"inputText\"\n       (ngModelChange)=\"inputChange.next($event)\"\n       [disabled]=\"disabled\"\n       (blur)=\"resetInputText()\"\n       >\n<datalist [id]=\"dataListId\" [ngClass]=\"datalistClass\">\n  <option *ngFor=\"let candidateEntry of valueCandidates | keyvalue\" [value]=\"formatModel(candidateEntry.value)\">\n</datalist>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 798,
                            "end": 811,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 799,
                                "end": 807,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ConfirmDeleteDialogComponent",
            "id": "component-ConfirmDeleteDialogComponent-6eb8ad916d69ab525baae9503f327b49bee432a3222475cdb07f635bc2592737e2d7b15f54ddd924c661480b807a7a3c72605f953d0dc0a0eab519575ac4ae14",
            "file": "src/app/component/confirm-delete-dialog/confirm-delete-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-delete-dialog",
            "styleUrls": [
                "./confirm-delete-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-delete-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "cancelButtonText",
                    "defaultValue": "'No'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmButtonText",
                    "defaultValue": "'Yes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Do you want to proceed?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Confirm Action'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "cssClass",
                    "defaultValue": "'modal fade'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'modal fade'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, HostBinding, Input, OnInit, Output} from '@angular/core';\nimport {NgbActiveModal} from \"@ng-bootstrap/ng-bootstrap\";\n\n@Component({\n  selector: 'app-confirm-delete-dialog',\n  templateUrl: './confirm-delete-dialog.component.html',\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\n})\nexport class ConfirmDeleteDialogComponent implements OnInit {\n  @Input() title: string = 'Confirm Action';\n  @Input() message: string = 'Do you want to proceed?';\n  @Input() confirmButtonText: string = 'Yes';\n  @Input() cancelButtonText: string = 'No';\n  @HostBinding('class') cssClass = 'modal fade';\n\n  constructor(\n    public activeModal: NgbActiveModal\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"Delete dialog rendered\")\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-delete-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "activeModal",
                        "type": "NgbActiveModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{ title }}</h5>\n      <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"\n              (click)=\"activeModal.dismiss('Cross click')\"></button>\n    </div>\n    <div class=\"modal-body\">\n      {{ message }}\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\"\n              (click)=\"activeModal.dismiss('Cancel click')\">\n        {{ cancelButtonText }}\n      </button>\n      <button type=\"button\" class=\"btn btn-danger\" data-bs-dismiss=\"modal\" (click)=\"activeModal.close('confirm')\">\n        {{ confirmButtonText }}\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-839f0c59cbd992a2b7d9975d5918ef49c40ad89dfad28a91eef9af93f2f7042f649dd25e1a68494501d6bf6a0c95c71a051cbd12deaaf57d731b4404dfd44bcd-1",
            "file": "src/app/component/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(\n\n  ) { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<nav class=\"navbar navbar-expand-sm navbar-dark bg-dark mb-3 ps-2 pe-2\">\n  <a class=\"navbar-brand\" routerLink=\"/\">Wendy's Tournament Manaegement</a>\n  <button class=\"navbar-toggler btn btn-outline-primary\" type=\"button\"\n          data-bs-toggle=\"collapse\" data-bs-target=\"#navbarContent\"  aria-expanded=\"false\" aria-label=\"Toggle navigation\"\n          aria-controls=\"navbarContent\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarContent\">\n    <ul class=\"navbar-nav mr-auto mt-2 mt-sm-0 ms-5\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" routerLink=\"/horses\">Horses</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/tournaments\">Tournaments</a>\n      </li>\n    </ul>\n  </div>\n</nav>\n"
        },
        {
            "name": "HorseComponent",
            "id": "component-HorseComponent-eb9a4eba70cc159086aba44523a34d965495ad21c402aec699fcc7ed1abceeead1ae69900b200b1ebb7d628e89050a7c3d76b47c8c6e51a6939581f1f6df41eb",
            "file": "src/app/component/horse/horse.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horse",
            "styleUrls": [
                "./horse.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horse.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bannerError",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "breedSuggestions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "formatBreedName",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "horseForDeletion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorseListDto | undefined",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "horses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorseListDto[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "search",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "searchBornEarliest",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "searchBornLatest",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "searchChangedObservable",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "searchParams",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorseSearch",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteButtonClick",
                    "args": [
                        {
                            "name": "horse",
                            "type": "HorseListDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "horse",
                            "type": "HorseListDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteConfirmed",
                    "args": [
                        {
                            "name": "confirm",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirm",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadHorses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showConfirmDeleteDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\nimport {ToastrService} from 'ngx-toastr';\nimport {HorseService} from 'src/app/service/horse.service';\nimport {Horse, HorseListDto} from '../../dto/horse';\nimport {HorseSearch} from '../../dto/horse';\nimport {debounceTime, map, Observable, of, Subject} from 'rxjs';\nimport {BreedService} from \"../../service/breed.service\";\nimport {NgbActiveModal, NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\nimport {ConfirmDeleteDialogComponent} from \"../confirm-delete-dialog/confirm-delete-dialog.component\";\n\n\n@Component({\n  selector: 'app-horse',\n  templateUrl: './horse.component.html',\n  styleUrls: ['./horse.component.scss']\n})\nexport class HorseComponent implements OnInit {\n\n  search: boolean = false;\n  horses: HorseListDto[] = [];\n  bannerError: string | null = null;\n  searchParams: HorseSearch = {};\n  searchBornEarliest: string | null = null;\n  searchBornLatest: string | null = null;\n  horseForDeletion: HorseListDto | undefined;\n  searchChangedObservable = new Subject<void>();\n\n  constructor(\n    private service: HorseService,\n    private breedService: BreedService,\n    private modalService: NgbModal,\n    private notification: ToastrService,\n  ) { }\n\n  ngOnInit(): void {\n    this.reloadHorses();\n    this.searchChangedObservable\n      .pipe(debounceTime(300))\n      .subscribe({next: () => this.reloadHorses()});\n  }\n\n  reloadHorses() {\n    if (this.searchBornEarliest == null || this.searchBornEarliest === \"\") {\n      delete this.searchParams.bornEarliest;\n    } else {\n      this.searchParams.bornEarliest = new Date(this.searchBornEarliest);\n    }\n    if (this.searchBornLatest == null || this.searchBornLatest === \"\") {\n      delete this.searchParams.bornLastest;\n    } else {\n      this.searchParams.bornLastest = new Date(this.searchBornLatest);\n    }\n    this.service.search(this.searchParams)\n      .subscribe({\n        next: data => {\n          this.horses = data;\n        },\n        error: error => {\n          console.error('Error fetching horses', error);\n          this.bannerError = 'Could not fetch horses: ' + error.message;\n          const errorMessage = error.status === 0\n            ? 'Is the backend up?'\n            : error.message.message;\n          this.notification.error(errorMessage, 'Could Not Fetch Horses');\n        }\n      });\n  }\n  searchChanged(): void {\n    this.searchChangedObservable.next();\n  }\n\n  breedSuggestions = (input: string): Observable<string[]> =>\n    this.breedService.breedsByName(input, 5)\n      .pipe(map(bs =>\n        bs.map(b => b.name)));\n\n  formatBreedName = (name: string) => name; // It is already the breed name, we just have to give a function to the component\n\n  public onDeleteButtonClick(horse: HorseListDto): void {\n    console.log(\"Delete clicked\")\n    this.horseForDeletion = horse;\n    this.showConfirmDeleteDialog()\n  }\n\n  private showConfirmDeleteDialog(): void {\n    const modalRef = this.modalService.open(ConfirmDeleteDialogComponent);\n    modalRef.componentInstance.title = 'Delete Confirmation';\n    modalRef.componentInstance.message = 'Are you sure you want to delete this horse?';\n    modalRef.componentInstance.confirmButtonText = 'Yes, delete'\n    modalRef.componentInstance.cancelButtonText = 'No, stop'\n\n    modalRef.result.then((result) => {\n      if (result) {\n        // Perform the delete operation\n        this.onDeleteConfirmed(true);\n      }\n    }, (reason) => {\n      // Handle modal dismissal\n    });\n\n  }\n\n  onDeleteConfirmed(confirm: boolean): void {\n    if (confirm && this.horseForDeletion && this.horseForDeletion.id !== undefined) {\n      // Call the service to delete the horse, then navigate or show a message\n      this.service.delete(this.horseForDeletion.id).subscribe({\n        next: () => {\n          this.notification.success('Horse successfully deleted.');\n          // Navigate away or update the view as necessary\n        },\n        error: error => {\n          console.error('Error deleting horse', error);\n          this.notification.error('Error occurred while deleting the horse.');\n          // Handle the display of the error to the user\n        }\n      });\n    } else {\n      // Handle the case where the horse or its ID is undefined\n      this.notification.error('Error: No horse selected for deletion.');\n    }\n\n    this.horseForDeletion = undefined;  // Hide dialog\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"sass:map\";\n@import \"bootstrap/scss/functions\";\n@import \"bootstrap/scss/variables\";\n@import \"bootstrap/scss/mixins\";\n\n.min-width {\n    /* Used to get the actions column in the table to be not wider than necessary */\n    width: 0;\n}\n\n.center-td > td {\n    vertical-align: middle;\n}\n\n.responsive-info-button, .responsive-warning-button, .responsive-danger-button, .responsive-dark-button, .responsive-tree-button {\n    @include button-variant($light, $light);\n}\n\n@each $color in (info, warning, danger) {\n    $value: map.get($theme-colors, $color);\n    tr:hover .responsive-#{$color}-button {\n        @include button-variant($value, $value);\n    }\n}\n",
                    "styleUrl": "./horse.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breedService",
                        "type": "BreedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breedService",
                        "type": "BreedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- SANITY CHECK BANNER\n    This is just for checking, that your setup works.\n    TODO: You can – and should – remove this later\n    -->\n<div class=\"container mt-3 mb-3\" *ngIf=\"bannerError\">\n  <div class=\"alert alert-danger\" role=\"alert\">\n    <h4>Error!</h4> {{ bannerError }}\n    <p>Could not load horses.</p>\n    <p>Something is not quite right. Did you start the backend?</p>\n  </div>\n</div>\n\n<div class=\"container mt-3\" *ngIf=\"!bannerError && horses\">\n  <div class=\"alert alert-success\" role=\"alert\">\n    <h4 class=\"alert-heading\">Well done!</h4>\n    <p>Your application is up and running.</p>\n    <p>You should see the current list of horses below.</p>\n  </div>\n</div>\n<!-- END SANITY CHECK BANNER -->\n\n<div class=\"d-flex flex-row w-auto\">\n  <button class=\"btn btn-primary mr-1\" (click)=\"reloadHorses()\" aria-label=\"Reload horses\">\n    <i class=\"bi bi-arrow-clockwise\"></i>\n    Reload\n  </button>\n  <span style=\"flex: 1\"></span>\n  <a class=\"btn btn-secondary\" routerLink=\"create\" aria-label=\"New horse\">\n    <i class=\"bi bi-plus-lg\"></i>\n    New horse\n  </a>\n</div>\n\n<form class=\"d-flex flex-row w-auto mb-3\" (submit)=\"reloadHorses()\">\n  <!-- this button is here, just so that simple submitting of this form\n       to reload the horses, is possible -->\n  <button type=\"submit\" hidden=\"hidden\">submit</button>\n  <div class=\"flex-grow-1\">\n    <label for=\"searchHorseName\" class=\"col-form-label\">\n      Name\n    </label>\n    <input type=\"text\" id=\"searchHorseName\" name=\"searchHorseName\"\n           class=\"form-control\"\n           [(ngModel)]=\"searchParams.name\"\n           (ngModelChange)=\"searchChanged()\"\n           >\n  </div>\n  <div class=\"ms-1\">\n    <label for=\"searchHorseSex\" class=\"col-form-label\">\n      Sex\n    </label>\n    <select id=\"searchHorseSex\" name=\"searchHorseSex\"\n            class=\"form-select\"\n            [(ngModel)]=\"searchParams.sex\"\n            (ngModelChange)=\"searchChanged()\"\n    >\n      <option></option>\n      <option value=\"FEMALE\">Female</option>\n      <option value=\"MALE\">Male</option>\n    </select>\n  </div>\n  <div class=\"ms-1\">\n    <label for=\"searchHorseBornEarliest\" class=\"col-form-label\">\n      Earliest Date Of Birth\n    </label>\n    <!-- pattern and placeholder are fallbacks for browser, that use a simple text input for type=\"date\"\n         The date format of the plain HTML date input, in browser that support it is, sadly, not changeable in a cross-browser way\n      -->\n    <input type=\"date\" id=\"searchHorseBornEarliest\" name=\"searchHorseBornEarliest\"\n           pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n           placeholder=\"yyyy-mm-dd\"\n           class=\"form-control\"\n           [(ngModel)]=\"searchBornEarliest\"\n           (ngModelChange)=\"searchChanged()\"\n           >\n  </div>\n  <div class=\"ms-1\">\n    <label for=\"searchHorseBornLatest\" class=\"col-form-label\">\n      Latest Date Of Birth\n    </label>\n    <!-- pattern and placeholder are fallbacks for browser, that use a simple text input for type=\"date\"\n         The date format of the plain HTML date input, in browser that support it is, sadly, not changeable in a cross-browser way\n      -->\n    <input type=\"date\" id=\"searchHorseBornLatest\" name=\"searchHorseBornLatest\"\n           pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n           placeholder=\"yyyy-mm-dd\"\n           class=\"form-control\"\n           [(ngModel)]=\"searchBornLatest\"\n           (ngModelChange)=\"searchChanged()\"\n           >\n  </div>\n  <div class=\"ms-1 flex-grow-1\">\n    <label for=\"searchHorseBreed\" class=\"col-form-label\">\n      Breed\n    </label>\n    <app-autocomplete\n      textInputClass=\"form-control\"\n      id=\"searchHorseBreed\" name=\"searchHorseBreed\"\n      [suggestions]=\"breedSuggestions\"\n      [formatModel]=\"formatBreedName\"\n      [(ngModel)]=\"searchParams.breedName\"\n      (ngModelChange)=\"searchChanged()\"\n      valueNeedsToMatchSuggestion=\"false\"\n      >\n    </app-autocomplete>\n  </div>\n</form>\n\n<div class=\"mt-3\">\n  <table class=\"table table-hover\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Date of Birth</th>\n        <th>Breed</th>\n        <th class=\"min-width\">Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let horse of horses\" class=\"center-td\">\n        <td>{{horse.name}}</td>\n        <td>{{horse.sex === 'FEMALE' ? 'Female' : 'Male'}}</td>\n        <td>{{horse.dateOfBirth.toLocaleDateString()}}</td>\n        <td>{{horse.breed?.name ?? \"\"}}</td>\n        <td>\n          <div class=\"btn-group\">\n            <button class=\"btn btn-sm responsive-info-button\"\n               [routerLink]=\"['view', horse.id]\"\n               aria-label=\"Show horse details\">\n              <i class=\"bi bi-info-lg\"></i>\n            </button>\n            <button class=\"btn btn-sm responsive-warning-button\"\n               [routerLink]=\"['edit', horse.id]\"\n               aria-label=\"Edit horse\">\n              <i class=\"bi bi-pencil\"></i>\n            </button>\n            <a class=\"btn btn-sm responsive-danger-button\"\n               (click)=\"onDeleteButtonClick(horse)\"\n               aria-label=\"Edit horse\">\n              <i class=\"bi bi-trash\"></i>\n            </a>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n"
        },
        {
            "name": "HorseCreateEditComponent",
            "id": "component-HorseCreateEditComponent-f772bd682f1179adcebf464982affc1e0a36ff25d1dfcf670b0f8073bee6157538788a4b90700e695292b9854527a978dbd15641d2a62ad7f7f98eac980dc5a8",
            "file": "src/app/component/horse/horse-create-edit/horse-create-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horse-create-edit",
            "styleUrls": [
                "./horse-create-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horse-create-edit.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breedSuggestions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "dateOfBirthSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "heightSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "horse",
                    "defaultValue": "{\n    name: '',\n    sex: Sex.female,\n    dateOfBirth: new Date(), // TODO this is bad\n    height: 1.50, // TODO this is bad\n    weight: 500, // TODO this is bad\n    breed: undefined,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Horse",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "horseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "initialHorse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Horse | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "mode",
                    "defaultValue": "HorseCreateEditMode.create",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HorseCreateEditMode",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sexes",
                    "defaultValue": "[\n    { value: 'FEMALE', viewValue: 'Female' },\n    { value: 'MALE', viewValue: 'Male' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sexSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showConfirmDeleteDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "weightSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dynamicCssClassesForInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatBreedName",
                    "args": [
                        {
                            "name": "breed",
                            "type": "Breed | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "breed",
                            "type": "Breed | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "initializeFormFields",
                    "args": [
                        {
                            "name": "horse",
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "horse",
                            "type": "Horse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onDeleteConfirmed",
                    "args": [
                        {
                            "name": "confirm",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOnly call in states where horse.id is set to a valid and existing id.\n",
                    "description": "<p>Only call in states where horse.id is set to a valid and existing id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5348,
                                "end": 5355,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "confirm"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5342,
                                "end": 5347,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {NgForm, NgModel} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\nimport {Observable, of, retry} from 'rxjs';\nimport {Horse} from 'src/app/dto/horse';\nimport {Sex} from 'src/app/dto/sex';\nimport {HorseService} from 'src/app/service/horse.service';\nimport {Breed} from \"../../../dto/breed\";\nimport {BreedService} from \"../../../service/breed.service\";\n\n\nexport enum HorseCreateEditMode {\n  create,\n  edit,\n  view\n}\n\n@Component({\n  selector: 'app-horse-create-edit',\n  templateUrl: './horse-create-edit.component.html',\n  styleUrls: ['./horse-create-edit.component.scss']\n})\nexport class HorseCreateEditComponent implements OnInit {\n\n  mode: HorseCreateEditMode = HorseCreateEditMode.create;\n  horseId: number | undefined;\n  initialHorse: Horse | undefined;\n  horse: Horse = {\n    name: '',\n    sex: Sex.female,\n    dateOfBirth: new Date(), // TODO this is bad\n    height: 1.50, // TODO this is bad\n    weight: 500, // TODO this is bad\n    breed: undefined,\n  };\n  sexes = [\n    { value: 'FEMALE', viewValue: 'Female' },\n    { value: 'MALE', viewValue: 'Male' }\n  ];\n\n  private sexSet: boolean = false;\n  private heightSet: boolean = false;\n  private weightSet: boolean = false;\n  private dateOfBirthSet: boolean = false;\n\n  public showConfirmDeleteDialog: boolean = false;\n\n  get sex(): string {\n    return this.sexSet ? this.horse.sex.toString() : '';\n  }\n\n  set sex(value: string) {\n    if (value) {\n      this.sexSet = true;\n      this.horse.sex = value as Sex; // Assuming `value` will be either 'Male' or 'Female'\n    }\n  }\n\n\n  get height(): number | null {\n    return this.heightSet\n      ? this.horse.height\n      : null;\n  }\n\n  set height(value: number) {\n    this.heightSet = true;\n    this.horse.height = value;\n  }\n\n  get weight(): number | null {\n    return this.weightSet\n      ? this.horse.weight\n      : null;\n  }\n\n  set weight(value: number) {\n    this.weightSet = true;\n    this.horse.weight = value;\n  }\n\n  get dateOfBirth(): Date | null {\n    return this.dateOfBirthSet\n      ? this.horse.dateOfBirth\n      : null;\n  }\n\n  set dateOfBirth(value: Date) {\n    this.dateOfBirthSet = true;\n    this.horse.dateOfBirth = value;\n  }\n\n\n  constructor(\n    private service: HorseService,\n    private breedService: BreedService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private notification: ToastrService,\n  ) {\n  }\n\n  public get heading(): string {\n    switch (this.mode) {\n      case HorseCreateEditMode.create:\n        return 'Create New Horse';\n      case HorseCreateEditMode.edit:\n        return `Edit Horse Details`\n      case HorseCreateEditMode.view:\n        return `Horse Details`\n      default:\n        return '?';\n    }\n  }\n\n\n  public get submitButtonText(): string {\n    switch (this.mode) {\n      case HorseCreateEditMode.create:\n        return 'Create';\n      case HorseCreateEditMode.edit:\n        return 'Submit'\n      default:\n        return '?';\n    }\n  }\n\n  get modeIsCreate(): boolean {\n    return this.mode === HorseCreateEditMode.create;\n  }\n\n  get modeIsView(): boolean {\n    return this.mode === HorseCreateEditMode.view;\n  }\n\n  get modeIsEdit(): boolean {\n    return this.mode === HorseCreateEditMode.edit;\n  }\n\n  private get modeActionFinished(): string {\n    switch (this.mode) {\n      case HorseCreateEditMode.create:\n        return 'created';\n      case HorseCreateEditMode.edit:\n        return 'updated';\n      default:\n        return '?';\n    }\n  }\n\n  private initializeFormFields(horse: Horse): void {\n    this.initialHorse = {...horse}   // copy\n    this.sex = horse.sex ?? null;\n    this.height = horse.height ?? null;\n    this.weight = horse.weight ?? null;\n    this.dateOfBirth = horse.dateOfBirth ?? new Date();\n\n    // Mark as set to handle logic in your getters and setters\n    this.sexSet = horse.sex != null\n    this.heightSet = horse.height != null;\n    this.weightSet = horse.weight != null;\n    this.dateOfBirthSet = horse.dateOfBirth != null;\n  }\n\n  ngOnInit(): void {\n    this.route.data.subscribe(data => {\n      this.mode = data.mode;\n      if (!this.modeIsCreate) {\n        this.horseId = Number(this.route.snapshot.paramMap.get('id'));\n        this.service.getById(this.horseId).subscribe({\n          next: retrievedHorse => {\n          this.horse = retrievedHorse;\n          this.initializeFormFields(retrievedHorse)\n          },\n          error: error => {\n            console.error(`Error getting horse with id ${this.horseId}`, error);\n            // TODO show an error message to the user. Include and sensibly present the info from the backend!\n          }\n        })\n      }\n    })\n  }\n\n  public dynamicCssClassesForInput(input: NgModel): any {\n    return {\n      'is-invalid': !input.valid && !input.pristine,\n    };\n  }\n\n  public formatBreedName(breed: Breed | null): string {\n    return breed?.name ?? '';\n  }\n\n  breedSuggestions = (input: string) => (input === '')\n    ? of([])\n    :  this.breedService.breedsByName(input, 5);\n\n  public hasFormChanges(): boolean {\n    return JSON.stringify(this.initialHorse) !== JSON.stringify(this.horse);\n  }\n\n  public onDeleteButtonClick(): void {\n    this.showConfirmDeleteDialog = true;\n  }\n\n  /**\n   * Only call in states where horse.id is set to a valid and existing id.\n   * @param confirm\n   */\n  onDeleteConfirmed(confirm: boolean): void {\n    if (confirm && this.horse && this.horse.id !== undefined) {\n      // Call the service to delete the horse, then navigate or show a message\n      this.service.delete(this.horse.id).subscribe({\n        next: () => {\n          this.notification.success('Horse successfully deleted.');\n          this.router.navigate(['/horses']);\n        },\n        error: error => {\n          console.error('Error deleting horse', error);\n          this.notification.error('Error deleting horse');\n          // TODO show an error message to the user. Include and sensibly present the info from the backend!\n        }\n      });\n    }\n\n    this.showConfirmDeleteDialog = false; // Hide the dialog\n  }\n\n  public onSubmit(form: NgForm): void {\n    console.log('is form valid?', form.valid, this.horse);\n    if (form.valid) {\n      let observable: Observable<Horse>;\n      switch (this.mode) {\n        case HorseCreateEditMode.create:\n          observable = this.service.create(this.horse);\n          break;\n        case HorseCreateEditMode.edit:\n          if (!this.hasFormChanges()) {\n            console.log('No changes detected.');\n            return;\n          }\n          observable = this.service.update(this.horse);\n        default:\n          console.error('Unknown HorseCreateEditMode', this.mode);\n          return;\n      }\n      observable.subscribe({\n        next: data => {\n          this.notification.success(`Horse ${this.horse.name} successfully ${this.modeActionFinished}.`);\n          this.router.navigate(['/horses']);\n        },\n        error: error => {\n          console.error('Error creating horse', error);\n          // TODO show an error message to the user. Include and sensibly present the info from the backend!\n        }\n      });\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./horse-create-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breedService",
                        "type": "BreedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breedService",
                        "type": "BreedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "sex": {
                    "name": "sex",
                    "setSignature": {
                        "name": "sex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sex",
                        "type": "string",
                        "returnType": "string",
                        "line": 49
                    }
                },
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "number | null",
                        "line": 61
                    }
                },
                "weight": {
                    "name": "weight",
                    "setSignature": {
                        "name": "weight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "weight",
                        "type": "",
                        "returnType": "number | null",
                        "line": 72
                    }
                },
                "dateOfBirth": {
                    "name": "dateOfBirth",
                    "setSignature": {
                        "name": "dateOfBirth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Date",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dateOfBirth",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 83
                    }
                },
                "heading": {
                    "name": "heading",
                    "getSignature": {
                        "name": "heading",
                        "type": "string",
                        "returnType": "string",
                        "line": 104
                    }
                },
                "submitButtonText": {
                    "name": "submitButtonText",
                    "getSignature": {
                        "name": "submitButtonText",
                        "type": "string",
                        "returnType": "string",
                        "line": 118
                    }
                },
                "modeIsCreate": {
                    "name": "modeIsCreate",
                    "getSignature": {
                        "name": "modeIsCreate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 129
                    }
                },
                "modeIsView": {
                    "name": "modeIsView",
                    "getSignature": {
                        "name": "modeIsView",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 133
                    }
                },
                "modeIsEdit": {
                    "name": "modeIsEdit",
                    "getSignature": {
                        "name": "modeIsEdit",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 137
                    }
                },
                "modeActionFinished": {
                    "name": "modeActionFinished",
                    "getSignature": {
                        "name": "modeActionFinished",
                        "type": "string",
                        "returnType": "string",
                        "line": 141
                    }
                }
            },
            "templateData": "\n<h1 class=\"display-1\">{{heading}}</h1>\n\n\n<form #form=\"ngForm\" [class.was-validated]=\"form.submitted\" (ngSubmit)=\"onSubmit(form)\">\n  <div class=\"row\">\n    <!-- Start name and date of birth row -->\n    <div class=\"mb-2 col-lg-6\">\n      <!-- When nesting rows, always make row > col-* > row. The Bootstrap classes do not work right when an element is both col* and row -->\n      <div class=\"row\">\n        <label for=\"horseName\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Name\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n             >\n          <input type=\"text\"\n                 id=\"horseName\"\n                 name=\"horseName\"\n                 placeholder=\"Horse name\"\n                 class=\"form-control\"\n                 [class]=\"dynamicCssClassesForInput(horseNameModel)\"\n                 [(ngModel)]=\"horse.name\"\n                 [disabled]=\"modeIsView\"\n                 #horseNameModel=\"ngModel\"\n                 required\n                 >\n          <div class=\"invalid-feedback\">\n            <!-- This is shown, when the form validation deems the name input to be invalid -->\n            Name is required\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"mb-2 col-lg-6\">\n      <div class=\"row\">\n        <label for=\"horseDateOfBirth\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Date of Birth\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n             >\n          <!-- pattern and placeholder are fallbacks for browser, that use a simple text input for type=\"date\"\n               The date format of the plain HTML date input, in browser that support it is, sadly, not changeable in a cross-browser way\n            -->\n          <input type=\"date\"\n                 id=\"horseDateOfBirth\"\n                 name=\"horseDateOfBirth\"\n                 pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n                 placeholder=\"yyyy-mm-dd\"\n                 class=\"form-control\"\n                 [class]=\"dynamicCssClassesForInput(horseDateOfBirthModel)\"\n                 [(ngModel)]=\"dateOfBirth\"\n                 [disabled]=\"modeIsView\"\n                 #horseDateOfBirthModel=\"ngModel\"\n                 required\n                 >\n          <div class=\"invalid-feedback\">\n            Date of birth is required\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- End name and date of birth row -->\n  </div>\n\n  <div class=\"row\">\n    <!-- Start sex row -->\n    <div class=\"mb-2 col-lg-6\">\n      <div class=\"row\">\n        <label for=\"horseSex\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Sex\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n             >\n          <select class=\"form-select\"\n                  id=\"horseSex\"\n                  name=\"horseSex\"\n                  [(ngModel)]=\"sex\"\n                  (ngModelChange)=\"sex = $event\"\n                  [disabled]=\"modeIsView\"\n                  required\n                  >\n            <option value=\"\" disabled>Select Sex</option>\n            <option *ngFor=\"let s of sexes\" [ngValue]=\"s.value\">{{ s.viewValue }}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"mb-2 col-lg-6\">\n      <div class=\"row\">\n        <label for=\"horseBreed\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Breed\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n        >\n          <app-autocomplete\n            id=\"horseBreed\"\n            name=\"horseBreed\"\n            class=\"col-md-10 col-lg-8\"\n            textInputClass=\"form-control\"\n            valueNeedsToMatchSuggestion=\"true\"\n            [(ngModel)]=\"horse.breed\"\n            [formatModel]=\"formatBreedName\"\n            [suggestions]=\"breedSuggestions\"\n            [disabled]=\"modeIsView\"\n            ></app-autocomplete>\n        </div>\n        <!-- \\TEMPLATE EXLCUDE BEGIN\\ -->\n        <ng-template #breedDetail>\n          <span class=\"col-form-label col-md-10 col-lg-8\">{{horse.breed?.name}}</span>\n        </ng-template>\n        <!-- \\TEMPLATE EXLCUDE END\\ -->\n      </div>\n    </div>\n    <!-- End sex row -->\n  </div>\n\n  <div class=\"row\">\n    <!-- Start height and weight row -->\n    <div class=\"mb-2 col-lg-6\">\n      <div class=\"row\"><label for=\"horseHeight\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Height [m]\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n             >\n          <input type=\"number\" class=\"form-control\"\n                 id=\"horseHeight\"\n                 name=\"horseHeight\"\n                 step=\"0.01\"\n                 [(ngModel)]=\"height\"\n                 [disabled]=\"modeIsView\"\n                 required\n                 >\n        </div>\n        <!-- \\TEMPLATE EXLCUDE BEGIN\\ -->\n        <ng-template #heightDetail>\n          <span class=\"col-form-label col-md-10 col-lg-8\">{{horse.height}}</span>\n        </ng-template>\n        <!-- \\TEMPLATE EXLCUDE END\\ -->\n      </div>\n    </div>\n    <div class=\"mb-2 col-lg-6\">\n      <div class=\"row\"><label for=\"horseWeight\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-4\">\n          Weight [kg]\n        </label>\n        <div class=\"col-md-10 col-lg-8\"\n             >\n          <input type=\"number\" class=\"form-control\"\n                 id=\"horseWeight\"\n                 name=\"horseWeight\"\n                 step=\"1\"\n                 [(ngModel)]=\"weight\"\n                 [disabled]=\"modeIsView\"\n                 required\n                 >\n        </div>\n        <!-- \\TEMPLATE EXLCUDE BEGIN\\ -->\n        <ng-template #weightDetail>\n          <span class=\"col-form-label col-md-10 col-lg-8\">{{horse.weight}}</span>\n        </ng-template>\n        <!-- \\TEMPLATE EXLCUDE END\\ -->\n      </div>\n    </div>\n  </div>\n\n  <div class=\"mt-4 d-flex flex-row\">\n    <button type=\"button\"\n            class=\"btn btn-danger\"\n            *ngIf=\"!modeIsCreate\"\n            (click)=\"onDeleteButtonClick()\"\n            >\n      <i class=\"bi bi-trash\"></i>\n      Delete\n    </button>\n\n\n    <!--  BEGIN SUBMIT BUTTON (only displayed in create or edit modes) -->\n    <span class=\"flex-grow-1\"></span>\n    <button type=\"submit\"\n            class=\"btn btn-primary\"\n            *ngIf=\"modeIsCreate\"\n            [disabled]=\"!form.valid\"\n            >\n      {{submitButtonText}}\n    </button>\n    <button type=\"submit\"\n            class=\"btn btn-primary\"\n            *ngIf=\"modeIsEdit\"\n            [disabled]=\"!form.valid || !hasFormChanges()\"\n    >\n      {{submitButtonText}}\n    </button>\n    <!--  END SUBMIT BUTTON  -->\n    <!--  BEGIN EDIT BUTTON (only displayed in view mode)  -->\n    <button type=\"button\"\n            class=\"btn btn-primary\"\n            *ngIf=\"modeIsView\"\n            [routerLink]=\"['/horses/edit', horse.id]\"\n            >\n      <i class=\"bi bi-pencil\"></i>\n      Edit\n    </button>\n    <!--  END EDIT BUTTON  -->\n  </div>\n</form>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TournamentCreateComponent",
            "id": "component-TournamentCreateComponent-d18fdefc92adc265211b37a8551a20dc971bb943255d52164ad1ca36ae70315db00d23e3c7afc65c4a0cb839bb0f108cf8dc1dd41f5b102bfbcabf8ca0c1e32c",
            "file": "src/app/component/tournament/tournament-create/tournament-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tournament-create",
            "styleUrls": [
                "./tournament-create.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tournament-create.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dummyHorseSelectionModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "endDateSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "horseSuggestions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "participants",
                    "defaultValue": "new Array(8)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(HorseSelection | null)[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "startDateSet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tournament",
                    "defaultValue": "{\n    name: \"\",\n    startDate: new Date(), // dummy\n    endDate: new Date(), //dummy\n    participants: [], // dummy\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentCreateDto",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addHorse",
                    "args": [
                        {
                            "name": "horse",
                            "type": "HorseSelection | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "horse",
                            "type": "HorseSelection | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicCssClassesForInput",
                    "args": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatHorse",
                    "args": [
                        {
                            "name": "participant",
                            "type": "HorseSelection | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "participant",
                            "type": "HorseSelection | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeHorse",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {NgForm, NgModel} from \"@angular/forms\";\nimport {TournamentCreateDto} from \"../../../dto/tournament\";\nimport {TournamentService} from \"../../../service/tournament.service\";\nimport {formatIsoDate} from \"../../../util/date-helper\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {ErrorFormatterService} from \"../../../service/error-formatter.service\";\nimport {HorseSelection} from \"../../../dto/horse\";\nimport {map, Observable} from \"rxjs\";\nimport {HorseService} from \"../../../service/horse.service\";\nimport {Location} from \"@angular/common\";\n\n@Component({\n  selector: 'app-tournament-create',\n  templateUrl: './tournament-create.component.html',\n  styleUrls: ['./tournament-create.component.scss']\n})\nexport class TournamentCreateComponent {\n  tournament: TournamentCreateDto = {\n    name: \"\",\n    startDate: new Date(), // dummy\n    endDate: new Date(), //dummy\n    participants: [], // dummy\n  };\n  participants: (HorseSelection | null)[] = new Array(8);\n  dummyHorseSelectionModel: unknown; // Just needed for the autocomplete\n  startDateSet = false;\n  endDateSet = false;\n\n  get startDate(): string | null {\n    return this.startDateSet\n      ? formatIsoDate(this.tournament.startDate)\n      : null;\n  }\n\n  set startDate(value: string | null) {\n    if (!value) {\n      this.startDateSet = false;\n    } else {\n      this.tournament.startDate = new Date(value);\n    }\n  }\n\n  get endDate(): string | null {\n    return this.endDateSet\n      ? formatIsoDate(this.tournament.endDate)\n      : null;\n  }\n\n  set endDate(value: string | null) {\n    if (!value) {\n      this.endDateSet = false;\n    } else {\n      this.tournament.endDate = new Date(value);\n    }\n  }\n\n\n  public constructor(\n    private service: TournamentService,\n    private horseService: HorseService,\n    private notification: ToastrService,\n    private errorFormatter: ErrorFormatterService,\n    private location: Location,\n  ) {\n  }\n\n  submit(form: NgForm) {\n    console.log(form.valid, this.tournament);\n    if (form.invalid)\n      return;\n    const participants= <HorseSelection[]>this.participants\n      .filter(x => x != null);\n    if (participants.length != 8) {\n      this.notification.error(\"A tournament must have exactly 8 participants\", \"Not Enough Participants\");\n      return;\n    }\n    this.tournament.participants = participants;\n    this.service.create(this.tournament)\n      .subscribe({\n        next: data => {\n          this.notification.success(`Tournament ${this.tournament.name} created`, \"Tournament created successfully\");\n          this.location.back();\n        },\n        error: error => {\n          console.error(error.message, error);\n          this.notification.error(this.errorFormatter.format(error), \"Could Not Create Tournament\", {\n            enableHtml: true,\n            timeOut: 10000,\n          });\n        }\n      });\n  }\n\n  public dynamicCssClassesForInput(input: NgModel): any {\n    return {\n      'is-invalid': !input.valid && !input.pristine,\n    };\n  }\n\n  public formatHorse(participant: HorseSelection | null): string {\n    return !participant\n      ? \"\"\n      : `${participant.name} (${participant.dateOfBirth.toLocaleDateString()})`\n  }\n\n  horseSuggestions = (input: string): Observable<HorseSelection[]> =>\n    this.horseService.search({name: input, limit: 5})\n      .pipe(map(horses => horses.map(h => ({\n        id: h.id,\n        name: h.name,\n        dateOfBirth: h.dateOfBirth,\n      }))));\n\n  public addHorse(horse: HorseSelection | null) {\n    if (!horse)\n      return;\n    // This should happen late, when the ngModelChange hook has completed,\n    // so that changing dummyHorseSelectionModel works\n    setTimeout(() => {\n      const participants = this.participants;\n      for (let i = 0; i < 8; i++) {\n        if (participants[i]?.id === horse.id) {\n          this.notification.error(`${horse.name} is already in participant list`, \"Duplicate Participant\");\n          this.dummyHorseSelectionModel = null;\n          return;\n        }\n        if (participants[i] == null) {\n          participants[i] = horse;\n          this.dummyHorseSelectionModel = null;\n          return;\n        }\n      }\n      // If the above has not returned, we could not add the horse because all 8 slots are full\n      this.notification.error(\"All 8 slots are full\", \"Could Not Add Participant\");\n    });\n  }\n\n  public removeHorse(index: number) {\n    this.participants.splice(index, 1);\n    this.participants.push(null);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".min-width {\n  /* Used to get the actions column in the table to be not wider than necessary */\n  width: 0;\n}\n",
                    "styleUrl": "./tournament-create.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "horseService",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorFormatter",
                        "type": "ErrorFormatterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "horseService",
                        "type": "HorseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorFormatter",
                        "type": "ErrorFormatterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "startDate": {
                    "name": "startDate",
                    "setSignature": {
                        "name": "startDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 36,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "startDate",
                        "type": "",
                        "returnType": "string | null",
                        "line": 30
                    }
                },
                "endDate": {
                    "name": "endDate",
                    "setSignature": {
                        "name": "endDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "endDate",
                        "type": "",
                        "returnType": "string | null",
                        "line": 44
                    }
                }
            },
            "templateData": "<h1 class=\"display-1 mb-4\">Create Tournament</h1>\n\n<form #form=\"ngForm\" [class.was-validated]=\"form.submitted\" (submit)=\"submit(form)\">\n  <div class=\"w-auto mb-3\">\n    <div class=\"row\">\n      <!-- Begin Tournament name row -->\n      <div class=\"mb-2 col-lg-6\">\n        <div class=\"row\">\n          <label for=\"tournamentName\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-3\">\n            Name\n          </label>\n          <div class=\"col-md-10 col-lg-9\">\n            <input type=\"text\"\n                   id=\"tournamentName\" name=\"tournamentName\"\n                   placeholder=\"Tournament Name\"\n                   class=\"form-control\" [class]=\"dynamicCssClassesForInput(nameModel)\"\n                   #nameModel=\"ngModel\"\n                   [(ngModel)]=\"tournament.name\"\n                   required>\n            <div class=\"invalid-feedback\">\n              <!-- This is shown, when the form validation deems the name input to be invalid -->\n              Name is required\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- End Tournament name row -->\n    </div>\n\n    <div class=\"row\">\n      <!-- Begin Tournament dates row -->\n      <div class=\"mb-2 col-lg-6\">\n        <div class=\"row\">\n          <label for=\"tournamentStartDate\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-3\">\n            Start Date\n          </label>\n          <div class=\"col-md-10 col-lg-9\">\n            <!-- pattern and placeholder are fallbacks for browser, that use a simple text input for type=\"date\"\n                 The date format of the plain HTML date input, in browser that support it is, sadly, not changeable in a cross-browser way\n              -->\n            <input type=\"date\"\n                   id=\"tournamentStartDate\" name=\"tournamentStartDate\"\n                   pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n                   placeholder=\"yyyy-mm-dd\"\n                   class=\"form-control\"\n                   [class]=\"dynamicCssClassesForInput(startDateModel)\"\n                   #startDateModel=\"ngModel\"\n                   [(ngModel)]=\"startDate\"\n                   required>\n            <div class=\"invalid-feedback\">\n              <!-- This is shown, when the form validation deems the name input to be invalid -->\n              Start Date is required\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"mb-2 col-lg-6\">\n        <div class=\"row\">\n          <label for=\"tournamentEndDate\" class=\"col-form-label text-md-end text-muted col-md-2 col-lg-3\">\n            End Date\n          </label>\n          <div class=\"col-md-10 col-lg-9\">\n            <!-- pattern and placeholder are fallbacks for browser, that use a simple text input for type=\"date\"\n                 The date format of the plain HTML date input, in browser that support it is, sadly, not changeable in a cross-browser way\n              -->\n            <input type=\"date\"\n                   id=\"tournamentEndDate\" name=\"tournamentEndDate\"\n                   pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n                   placeholder=\"yyyy-mm-dd\"\n                   class=\"form-control\"\n                   [ngClass]=\"dynamicCssClassesForInput(endDateModel)\"\n                   [(ngModel)]=\"endDate\"\n                   #endDateModel=\"ngModel\"\n                   required>\n            <div class=\"invalid-feedback\">\n              <!-- This is shown, when the form validation deems the name input to be invalid -->\n              End Date is required\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <div>\n    <h2>Participant Horses</h2>\n    <!-- Begin horse selection block -->\n    <div class=\"row\">\n      <div class=\"col-lg-6 mb-2\">\n        <app-autocomplete\n          name=\"tournamentParticipantSelection\"\n          textInputClass=\"form-control\"\n          [suggestions]=\"horseSuggestions\"\n          [formatModel]=\"formatHorse\"\n          valueNeedsToMatchSuggestion=\"true\"\n          [(ngModel)]=\"dummyHorseSelectionModel\"\n          (ngModelChange)=\"addHorse($event)\"\n        >\n        </app-autocomplete>\n      </div>\n\n      <div class=\"col-lg-6\">\n        <table class=\"table align-baseline\">\n          <tbody>\n          <tr *ngFor=\"let participant of participants; index as i\">\n            <td>{{i}}:</td>\n            <td>{{formatHorse(participant)}}</td>\n            <td class=\"min-width\">\n              <!-- Make button just hidden, when no participant is present, to keep layout correct -->\n              <button type=\"button\"\n                      class=\"btn btn-light ms-2\"\n                      (click)=\"removeHorse(i)\"\n                      [style.visibility]=\"participant ? 'visible' : 'hidden'\">\n                <i class=\"bi-trash\"></i>\n              </button>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"d-flex justify-content-end\">\n    <button type=\"submit\"\n            class=\"btn btn-primary\"\n            [disabled]=\"!form.valid\"\n            >\n      Create\n    </button>\n  </div>\n</form>\n"
        },
        {
            "name": "TournamentStandingsBranchComponent",
            "id": "component-TournamentStandingsBranchComponent-b5eca0b1a833c9fea064a18d957374c6cc62f30e839ee9bf998905f3c490d3c23f99b89fe70593d3ff2ee141ca4fe6ffa0f115b9e17eff14d95fbbe7a9249e92",
            "file": "src/app/component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tournament-standings-branch",
            "styleUrls": [
                "./tournament-standings-branch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tournament-standings-branch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "allParticipants",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "TournamentDetailParticipantDto[]",
                    "decorators": []
                },
                {
                    "name": "branchPosition",
                    "defaultValue": "TournamentBranchPosition.FINAL_WINNER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "TournamentBranchPosition",
                    "decorators": []
                },
                {
                    "name": "treeBranch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TournamentStandingsTreeDto | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "suggestions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "TournamentBranchPosition",
                    "defaultValue": "TournamentBranchPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "formatParticipant",
                    "args": [
                        {
                            "name": "participant",
                            "type": "TournamentDetailParticipantDto | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "participant",
                            "type": "TournamentDetailParticipantDto | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {TournamentDetailParticipantDto, TournamentStandingsTreeDto} from \"../../../../dto/tournament\";\nimport {of} from \"rxjs\";\n\nenum TournamentBranchPosition {\n  FINAL_WINNER,\n  UPPER,\n  LOWER,\n}\n\n@Component({\n  selector: 'app-tournament-standings-branch',\n  templateUrl: './tournament-standings-branch.component.html',\n  styleUrls: ['./tournament-standings-branch.component.scss']\n})\nexport class TournamentStandingsBranchComponent {\n  protected readonly TournamentBranchPosition = TournamentBranchPosition;\n  @Input() branchPosition = TournamentBranchPosition.FINAL_WINNER;\n  @Input() treeBranch: TournamentStandingsTreeDto | undefined;\n  @Input() allParticipants: TournamentDetailParticipantDto[] = [];\n\n  get isUpperHalf(): boolean {\n    return this.branchPosition === TournamentBranchPosition.UPPER;\n  }\n\n  get isLowerHalf(): boolean {\n    return this.branchPosition === TournamentBranchPosition.LOWER;\n  }\n\n  get isFinalWinner(): boolean {\n    return this.branchPosition === TournamentBranchPosition.FINAL_WINNER;\n  }\n\n  suggestions = (input: string) => {\n    // The candidates are either the participants of the previous round matches in this branch\n    // or, if this is the first round, all participant horses\n    const allCandidates =\n      this.treeBranch?.branches?.map(b => b.thisParticipant)\n      ?? this.allParticipants;\n    const results = allCandidates\n        .filter(x => !!x)\n        .map(x => <TournamentDetailParticipantDto><unknown>x)\n        .filter((x) =>\n            x.name.toUpperCase().match(new RegExp(`.*${input.toUpperCase()}.*`)));\n    return of(results);\n  };\n\n  public formatParticipant(participant: TournamentDetailParticipantDto | null): string {\n    return participant\n        ? `${participant.name} (${participant.dateOfBirth.toLocaleDateString()})`\n        : \"\";\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tournament-standings-branch.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "isUpperHalf": {
                    "name": "isUpperHalf",
                    "getSignature": {
                        "name": "isUpperHalf",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 22
                    }
                },
                "isLowerHalf": {
                    "name": "isLowerHalf",
                    "getSignature": {
                        "name": "isLowerHalf",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 26
                    }
                },
                "isFinalWinner": {
                    "name": "isFinalWinner",
                    "getSignature": {
                        "name": "isFinalWinner",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"d-flex flex-row pt-1 pb-1\"\n     [class.align-items-end]=\"isUpperHalf\"\n     [class.align-items-start]=\"isLowerHalf\"\n     [class.align-items-center]=\"isFinalWinner\">\n\n  <div class=\"d-flex flex-column me-3\" *ngIf=\"treeBranch?.branches\">\n    <!-- Earlier round(s) -->\n    <div class=\"pt-3\">\n      <app-tournament-standings-branch\n        [branchPosition]=\"TournamentBranchPosition.UPPER\"\n        [treeBranch]=\"treeBranch?.branches?.[0]\"\n        [allParticipants]=\"allParticipants\"\n        ></app-tournament-standings-branch>\n    </div>\n    <div class=\"pb-3\">\n      <app-tournament-standings-branch\n        [branchPosition]=\"TournamentBranchPosition.LOWER\"\n        [treeBranch]=\"treeBranch?.branches?.[1]\"\n        [allParticipants]=\"allParticipants\"\n        ></app-tournament-standings-branch>\n    </div>\n  </div>\n\n  <app-autocomplete\n    textInputClass=\"form-control\"\n    valueNeedsToMatchSuggestion=\"true\"\n    [suggestions]=\"suggestions\"\n    [(ngModel)]=\"treeBranch.thisParticipant\"\n    [formatModel]=\"formatParticipant\"\n    ></app-autocomplete>\n</div>\n"
        },
        {
            "name": "TournamentStandingsComponent",
            "id": "component-TournamentStandingsComponent-752994b594b0c796897ae5ed6369d98a876ca31457895d6c346ceddb07526930f71ef16ba4d5a0a10e552455d5ff41be24b3cb2d9d71892d1c032c77ffffe812",
            "file": "src/app/component/tournament/tournament-standings/tournament-standings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tournament-standings",
            "styleUrls": [
                "./tournament-standings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tournament-standings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "standings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TournamentStandingsDto | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "generateFirstRound",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TournamentStandingsDto} from \"../../../dto/tournament\";\nimport {TournamentService} from \"../../../service/tournament.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {NgForm} from \"@angular/forms\";\nimport {Location} from \"@angular/common\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {ErrorFormatterService} from \"../../../service/error-formatter.service\";\n\n@Component({\n  selector: 'app-tournament-standings',\n  templateUrl: './tournament-standings.component.html',\n  styleUrls: ['./tournament-standings.component.scss']\n})\nexport class TournamentStandingsComponent implements OnInit {\n  standings: TournamentStandingsDto | undefined;\n\n  public constructor(\n    private service: TournamentService,\n    private errorFormatter: ErrorFormatterService,\n    private route: ActivatedRoute,\n    private notification: ToastrService,\n    private location: Location,\n  ) {\n  }\n\n  public ngOnInit() {\n    // TODO to be implemented.\n  }\n\n  public submit(form: NgForm) {\n    // TODO to be implemented.\n  }\n\n  public generateFirstRound() {\n    if (!this.standings)\n      return;\n    // TODO implement\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tournament-standings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errorFormatter",
                        "type": "ErrorFormatterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "modifierKind": [
                    125
                ],
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "TournamentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorFormatter",
                        "type": "ErrorFormatterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notification",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 class=\"display-1\">Standings of {{standings?.name}}</h1>\n\n<form #form=\"ngForm\" (submit)=\"submit(form)\">\n  <app-tournament-standings-branch\n    *ngIf=\"standings\"\n    [treeBranch]=\"standings.tree\"\n    [allParticipants]=\"standings.participants\"\n    ></app-tournament-standings-branch>\n\n  <div class=\"d-flex justify-content-end mb-3\">\n    <button type=\"button\"\n            class=\"btn btn-secondary me-1\"\n            (click)=\"generateFirstRound()\"\n    >Generate First Round Matches</button>\n    <button type=\"submit\"\n            class=\"btn btn-primary\"\n    >Save</button>\n  </div>\n</form>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d50a98826b82ecc4bd55c3cc2d55a54dcad808b487bc61fd999691ca8336d954d0f6066b29917120424c15e6547c8cf4a509b6a531b66207b6d44459cb925e4e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport {ToastrModule} from 'ngx-toastr';\n\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {AutocompleteComponent} from './component/autocomplete/autocomplete.component';\nimport {HeaderComponent} from './component/header/header.component';\nimport {HorseCreateEditComponent} from './component/horse/horse-create-edit/horse-create-edit.component';\nimport {HorseComponent} from './component/horse/horse.component';\nimport {ConfirmDeleteDialogComponent} from './component/confirm-delete-dialog/confirm-delete-dialog.component';\nimport {TournamentCreateComponent} from './component/tournament/tournament-create/tournament-create.component';\nimport {TournamentStandingsComponent} from './component/tournament/tournament-standings/tournament-standings.component';\nimport {TournamentStandingsBranchComponent} from './component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component';\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    HorseComponent,\n    HorseCreateEditComponent,\n    AutocompleteComponent,\n    ConfirmDeleteDialogComponent,\n    TournamentCreateComponent,\n    TournamentStandingsComponent,\n    TournamentStandingsBranchComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    ToastrModule.forRoot(),\n    BrowserAnimationsModule,\n    NgbModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AutocompleteComponent"
                        },
                        {
                            "name": "ConfirmDeleteDialogComponent"
                        },
                        {
                            "name": "HorseComponent"
                        },
                        {
                            "name": "HorseCreateEditComponent"
                        },
                        {
                            "name": "TournamentCreateComponent"
                        },
                        {
                            "name": "TournamentStandingsBranchComponent"
                        },
                        {
                            "name": "TournamentStandingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-588e64bdec17f8b2cd22f7863c863a3d4c9b99040c11ed5cf673c08554b5d66d69ffac28ed6a9310fcf2666531e095758b85f0f3fc62d031a89a4782ea6a4125",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {\n  HorseCreateEditComponent,\n  HorseCreateEditMode\n} from './component/horse/horse-create-edit/horse-create-edit.component';\nimport {HorseComponent} from './component/horse/horse.component';\nimport {TournamentCreateComponent} from \"./component/tournament/tournament-create/tournament-create.component\";\nimport {TournamentStandingsComponent} from \"./component/tournament/tournament-standings/tournament-standings.component\";\n\nconst ROUTES: Routes = [\n  {path: '', redirectTo: 'horses', pathMatch: 'full'},\n  {path: 'horses', children: [\n    {path: '', component: HorseComponent},\n    {path: 'create', component: HorseCreateEditComponent, data: {mode: HorseCreateEditMode.create}},\n    {path: 'edit/:id', component: HorseCreateEditComponent, data: {mode: HorseCreateEditMode.edit}},\n    {path: 'view/:id', component: HorseCreateEditComponent, data:  {mode: HorseCreateEditMode.view}}\n  ]},\n  {path: 'tournaments', children: [\n    {path: 'create', component: TournamentCreateComponent},\n    {path: 'standings/:id', component: TournamentStandingsComponent}\n  ]},\n  {path: '**', redirectTo: 'horses'},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(ROUTES)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "baseUri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/breed.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.backendUrl + \"/breeds\""
            },
            {
                "name": "baseUri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/horse.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.backendUrl + '/horses'"
            },
            {
                "name": "baseUri",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/tournament.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.backendUrl + '/tournaments'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  backendUrl: 'http://localhost:8080',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  backendUrl: 'http://localhost:8080',\n}"
            }
        ],
        "functions": [
            {
                "name": "formatIsoDate",
                "file": "src/app/util/date-helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "date",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "HorseCreateEditMode",
                "childs": [
                    {
                        "name": "create",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "edit",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "view",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/component/horse/horse-create-edit/horse-create-edit.component.ts"
            },
            {
                "name": "Sex",
                "childs": [
                    {
                        "name": "female",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FEMALE"
                    },
                    {
                        "name": "male",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MALE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/dto/sex.ts"
            },
            {
                "name": "TournamentBranchPosition",
                "childs": [
                    {
                        "name": "FINAL_WINNER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "UPPER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOWER",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/service/breed.service.ts": [
                {
                    "name": "baseUri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/breed.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.backendUrl + \"/breeds\""
                }
            ],
            "src/app/service/horse.service.ts": [
                {
                    "name": "baseUri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/horse.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.backendUrl + '/horses'"
                }
            ],
            "src/app/service/tournament.service.ts": [
                {
                    "name": "baseUri",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/tournament.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.backendUrl + '/tournaments'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  backendUrl: 'http://localhost:8080',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  backendUrl: 'http://localhost:8080',\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/util/date-helper.ts": [
                {
                    "name": "formatIsoDate",
                    "file": "src/app/util/date-helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/component/horse/horse-create-edit/horse-create-edit.component.ts": [
                {
                    "name": "HorseCreateEditMode",
                    "childs": [
                        {
                            "name": "create",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "edit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "view",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/component/horse/horse-create-edit/horse-create-edit.component.ts"
                }
            ],
            "src/app/dto/sex.ts": [
                {
                    "name": "Sex",
                    "childs": [
                        {
                            "name": "female",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FEMALE"
                        },
                        {
                            "name": "male",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MALE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/dto/sex.ts"
                }
            ],
            "src/app/component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component.ts": [
                {
                    "name": "TournamentBranchPosition",
                    "childs": [
                        {
                            "name": "FINAL_WINNER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "UPPER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOWER",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "ROUTES",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AutocompleteComponent",
                "coveragePercent": 14,
                "coverageCount": "4/28",
                "status": "low"
            },
            {
                "filePath": "src/app/component/confirm-delete-dialog/confirm-delete-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDeleteDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/component/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/component/horse/horse-create-edit/horse-create-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorseCreateEditComponent",
                "coveragePercent": 4,
                "coverageCount": "1/21",
                "status": "low"
            },
            {
                "filePath": "src/app/component/horse/horse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/component/tournament/tournament-create/tournament-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TournamentCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/component/tournament/tournament-standings/tournament-standings-branch/tournament-standings-branch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TournamentStandingsBranchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/component/tournament/tournament-standings/tournament-standings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TournamentStandingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/breed.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Breed",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/horse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Horse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/horse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HorseListDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/horse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HorseSearch",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/horse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HorseSelection",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentCreateDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetailDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentDetailParticipantDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentListDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentSearchParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentStandingsDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dto/tournament.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TournamentStandingsTreeDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/breed.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreedService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/breed.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseUri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/error-formatter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorFormatterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/horse.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HorseService",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/service/horse.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseUri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/tournament.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/tournament.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TournamentService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/tournament.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "baseUri",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/util/date-helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "formatIsoDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}